@model PagedList.IPagedList<ZuLuCommerce.Models.Product>
@using PagedList.Mvc
@using ZuLuCommerce.Models
@{
    ViewBag.Title = "Products list";
    eCommerceEntities db = new eCommerceEntities();
    var bs = db.OrderDetails.Where(x => x.Order.StatusId == 3).GroupBy(x => x.ProductId)
                   .Select(group => new
                   {
                       productid = group.Key,
                       Count = group.Count()
                   }).OrderByDescending(x => x.Count);
  
}
<h2>Products list</h2>



<a href=@Url.Action("Create") class="btn btn-success" style="margin:10px 0">Add new product</a>
<div class="box" style="padding:20px">
    @Html.Partial("_SearchSortFilterForm")


</div>
<a href=@Url.Action("Index","Products",new { page=1,kw="",sort="",supplier="",category="",price="",discount="",isactive = ""}) class="btn btn-danger" id="clear" style="width:130px">Clear all filter</a>

  
<div class="box">
    <div class="box-header with-border">
        <h3 class="box-title">Found @ViewBag.resultcount result(s)</h3>
    </div>
    <div class="box-body">
        <table class="table table-hover table-bordered">
            <tr>
                <th>
                    Name
                </th>
                <th>
                    Price
                </th>
                <th>
                    Discount
                </th>
                <th>
                    In Stock
                </th>

                <th>
                    Thumbnail
                </th>
                <th>
                    Category
                </th>
                <th>
                    Supplier
                </th>
                <th>
                    Is Active
                </th>
                <th>
                    Sold
                </th>
                <th></th>
            </tr>

            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Price)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Discount)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Stock)
                    </td>

                    <td>
                        @{
                            string src = "/Uploads/image-not-available.jpg";//default

                            if (item.Thumbnail != null)
                            {
                                var pic = item.Pictures.Where(x => x.ProductId == item.Id ).FirstOrDefault();
                                if (pic != null && !pic.URL.Equals("") && File.Exists(Server.MapPath("~/Uploads/Products/" + item.Id + "/" + item.Thumbnail)))
                                {
                                    src = "/Uploads/Products/" + item.Id + "/" + item.Thumbnail;

                                }
                            }
                            else
                            {
                                var pic = item.Pictures.Where(x => x.ProductId == item.Id).ToList();
                                if (pic != null)
                                {
                                    src = "/Uploads/Products/" + item.Id + "/" + item.Thumbnail;

                                }
                            }

                        }

                        <img style="height:80px;width:auto;" class="img-responsive" src="@src" />
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Category.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Supplier.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.IsActive)
                    </td>
                    <td>
                        @{ 
                            if (bs.Select(c => c.productid).Contains(item.Id))
                            {
                                var count = bs.Where(x => x.productid == item.Id).SingleOrDefault().Count;
                                <p>@count</p>
                            }
                            else
                            {
                                <p>0</p>
                            }
                        }
                    </td>
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                        @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                        @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                    </td>
                </tr>
                            }

        </table>
    </div>

    <div class="page-list">
        <div style="text-align:center;left:50%;position:relative;transform:translateX(-50%)" class="pagedListContainer">
            @Html.PagedListPager(Model, page => Url.Action("Index", new { page, kw = ViewBag.kw, sort = ViewBag.sort }))
        </div>
    </div>
</div>
    
@section Scripts {
   <script>
       $(document).ready(function () {
           $("#supplier").val("@ViewBag.supplier");
           $("#sort").val("@ViewBag.sort");
           $("#category").val("@ViewBag.category");
           @*$("#price").val("@ViewBag.price");*@
           $("#isactive").val("@ViewBag.isactive");
           $("#discount").val("@ViewBag.discount");
           $("#bestselling").val("@ViewBag.discount");
           bestselling
       });
    </script>
}